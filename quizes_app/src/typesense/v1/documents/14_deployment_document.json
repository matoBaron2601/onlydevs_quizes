{
    "content": "### Chapter 14: Deploying React\n\nThis chapter focuses on the deployment process of a React application, marking the transition from local development to making the app publicly accessible. Key topics covered include the differences between development and production versions of React, how to build an app for deployment, various hosting options, and enabling continuous integration with Git.\n\n**What is Deployment?**  \nDeployment is the process of making software available for use. For web apps, it involves preparing the app and transferring it to a server for public access.\n\n**Building an App**  \nThe process of compiling an app transforms source files into a standalone application. Key steps include linking to optimized production libraries, bundling required libraries, transpiling source files to ensure compatibility with web browsers, creating bundles for efficient transfer, minifying files to reduce bandwidth, and moving static files into a distribution directory. Using Create React App simplifies this process, allowing deployment with a single command: `npm run build`. Running this command generates a `build` directory containing all necessary files.\n\n**Examining the Build Directory**  \nThe `build` directory includes processed static files, with a streamlined `index.html` file that triggers the React app in a browser. Any changes to paths in `index.html` can allow local testing without a server, but some functionality may require HTTP/HTTPS access.\n\n**Static Directory and Asset Manifest**  \nThe static directory within the `build` folder contains compiled JavaScript and CSS files. Each built file includes a hash string to facilitate caching and future updates. An asset manifest is also created, listing original filenames for reference.\n\n**Development Mode vs. Production**  \nThe production version of React is a minified build with debugging tools and warnings removed, significantly reducing file sizes. Users can identify the running mode via a Chrome extension, with red indicating development and blue indicating production.\n\n**Putting It on the Web**  \nReact apps can be hosted in various ways based on expected traffic, deployment integration with version control, and hosting budget:\n\n- **Web Server Hosting:** Upload the `build` directory to any HTTP server (e.g., Apache, NGINX) using FTP or a web-based uploader. If the app uses routing, additional configuration is required to redirect requests to `index.html`.\n  \n- **Node Hosting:** Use Node.js with the `serve` package to deploy the app. This requires installing `serve` and running it with the command `serve -s build`.\n\n- **Deploying with Netlify:** Netlify allows one-step deployments from Git repositories, enabling continuous integration. Users must sign up for Netlify and link it to their Git repository. They configure build commands and publish directories relevant to Create React App and set up redirects for routing as necessary.\n\n**Custom Domains and HTTPS:** Users can configure custom domains and enable HTTPS through Netlify’s domain management features.\n\n**Summary**  \nThis chapter covered how to build and deploy a React application using various methods: using Create React App’s build process, publishing to a web server, Node server, or Netlify. Efforts in automating these processes facilitate reliable app deployment, making it accessible to a global audience. The next chapter will dive into advanced tools for setting up and configuring custom build environments for React applications.",
    "tags": [
        "budget",
        "path",
        "directory",
        "CSS",
        "Node.js",
        "summary",
        "css",
        "command",
        "Git",
        "process",
        "configuration",
        "tool",
        "JavaScript",
        "request",
        "update",
        "way",
        "repository",
        "software",
        "Build",
        "effort",
        "Deployment",
        "custom",
        "NGINX",
        "Create React App",
        "compatibility",
        "-s",
        "user",
        "Node",
        "http",
        "method",
        "source",
        "manifest",
        "build",
        "uploader",
        "Mode",
        ":*",
        "feature",
        "mode",
        "size",
        "Chrome",
        "application",
        "integration",
        "library",
        "Custom",
        "change",
        "redirect",
        "one",
        "React",
        "simplifie",
        "server",
        "transition",
        "Manifest",
        "step",
        "browser",
        "management",
        "App",
        "deployment",
        "Create",
        "Use",
        "HTTP",
        "production",
        "warning",
        "domain",
        "development",
        "environment",
        "transfer",
        "Directory",
        "file",
        "###",
        "web",
        "chapter",
        "npm",
        "*",
        "reference",
        "Users",
        "audience",
        "bundle",
        "package",
        "asset",
        "index.html",
        "Apache",
        "filename",
        "folder",
        "testing",
        "#",
        "access",
        "Development",
        "traffic",
        "Static",
        "hash",
        "HTTPS",
        "distribution",
        "functionality",
        "version",
        "use",
        "FTP",
        "difference",
        "topic",
        "option",
        "Server",
        "Chapter 14",
        "Asset",
        "Domains",
        "extension",
        "app",
        "control",
        "Hosting",
        "Netlify",
        "Production",
        "string"
    ]
}