{
    "content": "### Summary of Chapter 18: React Portals\n\nThis chapter introduces React Portals, a feature that allows rendering child components into different DOM nodes beyond the root of a React application. This is particularly useful for situations where components need to interact with elements outside of the main application node, such as modals and tooltips.\n\n**Key Concepts:**\n\n- **What is a Portal?**  \n  A Portal facilitates rendering child components in a separate DOM node that can be outside the React app's root. For example, a modal can be rendered in a separate HTML element styled to appear over the app.\n\n- **Creating a Portal:**  \n  Portals are created using the `ReactDOM.createPortal` method within a React component's render function. This method takes two arguments: the component to render and the target DOM node.\n\n- **Common Use Cases:**  \n  Portals are typically used for rendering elements like modal dialogs, tooltips, and hovercards. They allow for flexible positioning and formatting without being constrained by the parent component's dimensions.\n\n- **Rendering a Modal Dialog with Portals:**  \n  Steps for implementing a modal include creating an HTML node for the modal, creating a modal component, styling it, and conditionally rendering it based on a prop. The modal can be opened or closed by toggling a state variable. Importantly, events handled in a Portal behave like those in regular components.\n\n- **Managing Keyboard Focus:**  \n  Proper management of keyboard focus is crucial when using modals. When a modal opens, focus shifts from the main content. To restore focus when the modal closes, the `useEffect` hook along with a ref can be used to set focus to the desired element.\n\n**Summary of Learning Outcomes:**\n- Understanding what React Portals are and their purpose.\n- Identifying when to use Portals.\n- Creating and interacting with Portals.\n- Managing keyboard focus correctly in modal dialogs.\n\nNext, the book will delve into accessibility considerations when programming React interfaces.",
    "tags": [
        "React Portals",
        "Keyboard Focus:*",
        "content",
        "shift",
        "summary",
        "element",
        "step",
        "dimension",
        "Cases",
        "#",
        "Dialog",
        "purpose",
        "Focus",
        "behave",
        "management",
        "variable",
        "feature",
        ":*",
        "html",
        "component",
        "Modal",
        "Keyboard",
        "child",
        "Use",
        "facilitate",
        "Concepts",
        "useEffect",
        "modal",
        "function",
        "tooltip",
        "Portal",
        "example",
        "Portals",
        "state",
        "Summary",
        "dialog",
        "argument",
        "parent",
        "keyboard",
        "root",
        "application",
        "Key",
        "prop",
        "book",
        "###",
        "two",
        "portal",
        "event",
        "target",
        "interface",
        "focus",
        "accessibility",
        "positioning",
        "hovercard",
        "hook",
        "react",
        "consideration",
        "app",
        "chapter",
        "node",
        "situation",
        "Outcomes",
        "render",
        "method",
        "ref",
        "Learning",
        "Chapter 18",
        "DOM",
        "HTML",
        "React"
    ]
}